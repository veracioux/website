# NOTE: You can run 'dgen' to generate the production Dockerfile and the
# Dockerfile used by docker-compose

# Separate frontend build stage; reduces final image size
if [ "$ENVIRONMENT" != "dev" ]; then
    source frontend/docker/shDockerfile.common.in

    WORKDIR /frontend
    COPY frontend/{package.json,pnpm-lock.yaml} ./
    COPY frontend/{package.json,pnpm-lock.yaml,pnpm-workspace.yaml} ./
    COPY frontend/gimmicks/ascii-mugshot/package.json gimmicks/ascii-mugshot/
    RUN pnpm install --shamefully-hoist --frozen-lockfile --prod

    ## Bundle frontend
    COPY frontend .

    ENV ENVIRONMENT="$ENVIRONMENT" MACHINE="$MACHINE"
    RUN pnpm run generate
    # Minify SVG icons and copy them to static root
    # TODO: integrate into "pnpm run generate" or as a vite plugin
    RUN pnpm svgo -f assets/icons -o dist/static/icons
fi

#  ==========
## Main stage
#  ==========

# Using edge for now because it provides jinja2-cli
FROM "alpine:edge"

#  ---------------------------
## Install global dependencies
#  ---------------------------

RUN apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing \
    nginx gettext php81-fpm php81-session apache2-utils jinja2-cli

#  ------------
## The rest...
#  ------------

WORKDIR /app
COPY . /app

# Set up reverse proxy
if [ "$ENVIRONMENT" = "staging" ]; then
    COPY proxy/php-fpm.conf /etc/php81/php-fpm.d/www.conf
    COPY proxy/php.ini /etc/php81/php.ini
    COPY proxy/dummy.staging.htpasswd /var/www/auth/staging.htpasswd
fi

if [ "$ENVIRONMENT" = "dev" ]; then
    CMD scripts/entrypoint.sh
else
    ENV MACHINE="$MACHINE"
    COPY --from=frontend /frontend/dist /app/frontend/dist
    CMD scripts/entrypoint.sh
fi

# vim: filetype=dockerfile
