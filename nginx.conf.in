{%- macro location_status() %}
        location /status {
            add_header Content-Type text/plain;
            return 200 "alive";
        }
{%- endmacro %}

{%- macro location_static() %}
        location /static {
            alias /var/static_root/;
            expires 2M;
            add_header Cache-Control "public";
        }
    {%- if env == "staging" %}
        location /stg/static {
            alias /var/static_root/;
            expires 2M;
            add_header Cache-Control "public";
        }
    {%- endif %}
{%- endmacro %}

{%- macro compression() %}
        gzip on;
        gzip_proxied any;
        gzip_types text/plain text/html text/javascript application/javascript text/css;
        gzip_min_length 512;
{%- endmacro %}

{#-
    This snippet was used when I used heroku for hosting. It is kept here just
    in case.
#}
{%- macro redirect_https() %}
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$server_name$request_uri?;
        }
{%- endmacro %}

user root;

events {}

http {
    include mime.types;
    default_type text/plain;

    {{ compression() }}

    server {
        server_name *.veracioux.me *.localhost;
        listen ${WEB_PORT} default_server;

        location / {
            return 404;
        }
    }

    server {
        server_name veracioux.me www.veracioux.me localhost www.localhost;
        listen ${WEB_PORT};
        # Error page is handled by vue-router
        error_page 404 /;

        # Make sure the routes matched by this rule match those configured in
        # vue-router
        location ~ ^/(|contact|cv)/?$ {
            root   /app/frontend/dist;
            rewrite ^ /index.html break;
        }

        location /api {
            proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT}/api;
        }

    {%- if env == "staging" %}
        # Staging URL prefix, redirects to / after successful staging auth
        location /stg {
            auth_request /stg-auth;
            try_files _ @stg;
            error_page 401 /stg-login?redirect=$request_uri;
        }

        # Location that is visited when staging auth succeeds. Resolves to /.
        location @stg {
            rewrite ^/stg$ /;
            rewrite ^/stg/(.*) /$1;
        }

        # Returns 204 for successful staging auth, 401 otherwise
        location = /stg-auth {
            fastcgi_pass unix:/var/run/php-fpm.sock;
            include fastcgi.conf;
            fastcgi_param SCRIPT_FILENAME /app/proxy/staging-auth.php;
            fastcgi_param VERACIOUX_STAGING_ROOT "/stg";
            fastcgi_param CONTENT_LENGTH "";
            fastcgi_pass_request_body off;
        }

        # Staging loging form (GET) and credential submission endpoint (POST)
        location = /stg-login {
            fastcgi_pass unix:/var/run/php-fpm.sock;
            include fastcgi.conf;
            fastcgi_param SCRIPT_FILENAME /app/proxy/staging-login.php;
        }
    {% endif %}

        {{ location_status() }}
        {{ location_static() }}
    }

    server {
        server_name api.veracioux.me api.localhost;
        listen ${WEB_PORT};

        location / {
            proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT}/api/;
        }

        {{ location_status() }}
        {{ location_static() }}
    }

    server {
        server_name worker.veracioux.me worker.localhost;
        listen ${WEB_PORT};

        location / {
            proxy_pass http://${WORKER_SERVER_HOST}:${WORKER_SERVER_PORT}/;
        }

        {{ location_status() }}
    }
}
