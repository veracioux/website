# NOTE: You can run 'dgen' to generate the production Dockerfile and the
# Dockerfile used by docker-compose

FROM alpine:3.15

#  ---------------------------
## Install global dependencies
#  ---------------------------

RUN apk add --no-cache python3 py3-pip nodejs curl
# Install pnpm
RUN curl -L https://unpkg.com/@pnpm/self-installer '|' node
RUN apk add --no-cache nginx gettext
## Dependencies for psycopg2
RUN apk add --no-cache libpq
RUN apk add --no-cache --virtual build-deps-postgres libpq-dev
## Dependencies for pillow
RUN apk add --no-cache --virtual build-deps \
            python3-dev gcc musl-dev zlib-dev jpeg-dev
RUN apk add --no-cache zlib jpeg linux-headers
## Install pipenv
RUN pip install --no-cache-dir pipenv

## Required by 'heroku ps:exec' and wait-for-it.sh
RUN apk add --no-cache bash
RUN ln -sf /bin/bash /bin/sh

#  --------------------------
## Install local dependencies
#  --------------------------

## Worker server

WORKDIR /app/worker
COPY worker/package.json worker/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

## Backend

WORKDIR /app
COPY Pipfile.lock ./
RUN LANG=en_US.UTF-8 pipenv sync
# Install the virtual env globally, so it persists in the heroku filesystem
RUN pipenv run pip freeze '|' tail -n +2 '>' /requirements.txt
RUN pip install --no-cache-dir -r /requirements.txt

## Frontend

WORKDIR /app/frontend
COPY frontend/package.json frontend/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

#  ------------
## The rest...
#  ------------

if [ "$ENVIRONMENT" != "dev" ]; then
    ## Bundle frontend
    COPY frontend .
    RUN pnpm run build
fi

WORKDIR /app
COPY . /app

## Remove build dependencies
RUN apk del build-deps build-deps-postgres

if [ "$ENVIRONMENT" = "dev" ]; then
    CMD scripts/dev.sh
else
    COPY nginx.conf ./
    CMD scripts/production.sh
fi

# vim: filetype=dockerfile
