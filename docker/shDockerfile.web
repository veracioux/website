# NOTE: You can run 'dgen' to generate the production Dockerfile and the
# Dockerfile used by docker-compose

alpine_version=3.15
python_version=3.9
node_version=16.18

node_canvas_deps=(
    build-base
    g++
    cairo-dev
    jpeg-dev
    pango-dev
    giflib-dev
)

# Separate frontend build stage; reduces final image size
if [ "$ENVIRONMENT" != "dev" ]; then
    FROM "node:$node_version-alpine$alpine_version" as frontend

    ## Install deps for "canvas" node package
    RUN apk add --no-cache curl "${node_canvas_deps[@]}"

    # Install pnpm
    RUN curl -L https://unpkg.com/@pnpm/self-installer '|' node

    WORKDIR /frontend
    COPY frontend/{package.json,pnpm-lock.yaml} ./
    COPY frontend/{package.json,pnpm-lock.yaml,pnpm-workspace.yaml} ./
    COPY frontend/gimmicks/ascii-mugshot/package.json gimmicks/ascii-mugshot/
    RUN pnpm install --shamefully-hoist --frozen-lockfile --prod

    ## Bundle frontend
    COPY frontend .

    ENV ENVIRONMENT="$ENVIRONMENT" DEVICE="$DEVICE"
    RUN pnpm run generate
    # Minify SVG icons and copy them to static root
    # TODO: integrate into "pnpm run generate" or as a vite plugin
    RUN pnpm svgo -f assets/icons -o dist/static/icons
fi

#  ==========
## Main stage
#  ==========

FROM "alpine:$alpine_version"

#  ---------------------------
## Install global dependencies
#  ---------------------------

RUN apk add --no-cache nodejs curl

# Install pnpm
RUN curl -L https://unpkg.com/@pnpm/self-installer '|' node
# Install web server dependencies
RUN apk add --no-cache nginx gettext php8-fpm php8-session apache2-utils
if [ "$ENVIRONMENT" = "dev" ]; then
    ## Install deps for "canvas" node package
    RUN apk add --no-cache "${node_canvas_deps[@]}"
fi

#  --------------------------
## Install local dependencies
#  --------------------------

## Frontend

if [ "$ENVIRONMENT" != "dev" ]; then
    COPY --from=frontend /frontend/dist /app/frontend/dist
fi

# NOTE: the development container will run a build at runtime

#  ------------
## The rest...
#  ------------

WORKDIR /app
COPY . /app

# Set up reverse proxy
if [ "$ENVIRONMENT" = "staging" ]; then
    COPY proxy/php-fpm.conf /etc/php8/php-fpm.d/www.conf
    COPY proxy/php.ini /etc/php8/php.ini
    COPY proxy/dummy.staging.htpasswd /var/www/auth/staging.htpasswd
fi

if [ "$ENVIRONMENT" = "dev" ]; then
    RUN adduser -u "$(id -u)" -D user
    RUN mkdir -p /var/static_root '&&' chown -R user /app /var/static_root
    USER user
fi

if [ "$ENVIRONMENT" = "dev" ]; then
    CMD scripts/entrypoint-dev.sh
else
    ENV DEVICE="$DEVICE"
    CMD scripts/entrypoint-prod.sh
fi

# vim: filetype=dockerfile
