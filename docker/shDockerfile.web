# NOTE: You can run 'dgen' to generate the production Dockerfile and the
# Dockerfile used by docker-compose

alpine_version=3.15
python_version=3.9

# Separate frontend build stage; reduces final image size
if [ "$ENVIRONMENT" != "dev" ]; then
    FROM node:16.15-alpine"$alpine_version" as frontend

    RUN apk add --no-cache curl

    # Install pnpm
    RUN curl -L https://unpkg.com/@pnpm/self-installer '|' node

    WORKDIR /frontend
    COPY frontend/{package.json,pnpm-lock.yaml} ./
    COPY frontend/{package.json,pnpm-lock.yaml,pnpm-workspace.yaml} ./
    COPY frontend/gimmicks/ascii-mugshot/package.json gimmicks/ascii-mugshot/
    RUN pnpm install --frozen-lockfile --prod

    ## Bundle frontend
    COPY frontend .

    ENV ENVIRONMENT="$ENVIRONMENT" MACHINE="$MACHINE"
    RUN pnpm run build
    # Minify SVG icons and copy them to static root
    # TODO: integrate into "pnpm run build" or as a vite plugin
    RUN pnpm svgo -f src/assets/icons -o dist/static/icons
fi

# Separate python dependencies build stage; reduces final image size
{
    FROM python:"$python_version"-alpine"$alpine_version" as python

    ## Dependencies for psycopg2
    RUN apk add --no-cache libpq
    RUN apk add --no-cache libpq-dev
    ## Dependencies for pillow
    RUN apk add --no-cache python3-dev gcc musl-dev zlib-dev jpeg-dev
    RUN apk add --no-cache zlib jpeg linux-headers
    ## Install pipenv
    RUN pip install --no-cache-dir pipenv pipfile-requirements

    WORKDIR /python
    COPY Pipfile.lock ./
    RUN pipfile2req '>' requirements.txt

    RUN pip install --no-cache-dir -r requirements.txt

    # Remove unnecessary packages
    RUN pip uninstall --yes pipenv pipfile-requirements
}

#  ==========
## Main stage
#  ==========

FROM python:"$python_version"-alpine"$alpine_version"

#  ---------------------------
## Install global dependencies
#  ---------------------------

RUN apk add --no-cache nodejs curl

# Required by Pillow
RUN apk add --no-cache zlib jpeg linux-headers

# Install pnpm
RUN curl -L https://unpkg.com/@pnpm/self-installer '|' node
# Install web server dependencies
RUN apk add --no-cache nginx gettext php8-fpm php8-session apache2-utils

## Required by 'heroku ps:exec' and wait-for-it.sh
RUN apk add --no-cache bash
RUN ln -sf /bin/bash /bin/sh

#  --------------------------
## Install local dependencies
#  --------------------------

## Worker server

WORKDIR /app/worker
COPY worker/{package.json,pnpm-lock.yaml} ./
RUN pnpm install --frozen-lockfile

## Backend dependencies

# See 'python' build stage

COPY --from=python /usr/local/lib/python"$python_version"{,}
COPY --from=python /usr/local/bin{,}
SHDOCKER quote off
ENV 'PATH=/usr/local/bin:${PATH}'
SHDOCKER quote on

## Frontend

if [ "$ENVIRONMENT" != "dev" ]; then
    COPY --from=frontend /frontend/dist /app/frontend/dist
fi

# NOTE: the development container will run a build at runtime

#  ------------
## The rest...
#  ------------

WORKDIR /app
COPY . /app

# Set up reverse proxy
if [ "$ENVIRONMENT" = "staging" ]; then
    COPY proxy/php-fpm.conf /etc/php8/php-fpm.d/www.conf
    COPY proxy/php.ini /etc/php8/php.ini
    COPY proxy/dummy.staging.htpasswd /var/www/auth/staging.htpasswd
fi

if [ "$ENVIRONMENT" = "dev" ]; then
    CMD scripts/entrypoint-dev.sh
else
    ENV MACHINE="$MACHINE"
    CMD scripts/entrypoint-prod.sh
fi

# vim: filetype=dockerfile
