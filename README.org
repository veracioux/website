#+TITLE: veracioux website
#+LINK: tem https://github.com/tem-cli/tem
#+LINK: shdocker https://github.com/veracioux/shdocker
#+LINK: upload ./.tem/path/upload
#+LINK: upload-secrets ./.tem/path/upload-secrets

* Deployment
Deployment is controlled using =tem=

** TODO Production
Run the following commands on your local machine:
- [[upload-secrets][=upload-secrets=]] :: Upload private =.env= files and passwords stored in =.htpasswd= files.
- [[./.tem/path/upload][=upload=]] :: Builds all images and pushes them to the registry.

* Infrastructure
The website comprises the following components:
- Frontend :: =frontend/=, Vue 3, Nuxt 3
- API backend :: =backend/=, Django 3
- Worker server :: =worker/=, node http server, rabbitmq
- Staging proxy :: =proxy/=, PHP, provides password auth for staging
- Docker registry :: Facilitates efficient image uploads (runs only on production)
- Mail server :: =mail/=, planned, will probably use iRedMail

The plan is to have them organized in the following docker containers
(services), managed by =docker compose=:
- =web= :: Runs an =nginx= server configured from =nginx.conf.in= that serves the
  static frontend and acts as a reverse proxy for all the other services. In a
  staging environment, it also proxies all requests through a password auth PHP
  script located in =proxy/=.
- =backend= :: Runs the Django API backend.
- =mail= :: My private mail server, placeholder for now
- =docker-registry= :: Runs a docker registry using the =registry= image.
- =worker= :: The main worker server. It schedules tasks for individual workers via
  message queue. It also serves a simple API that can be used to request that a
  task be performed.
- =worker_<name>= :: Each individual worker is its own docker container. It
  consumes a message from the MQ and runs its task.

/NOTE: Currently, the =web= service runs nginx and the API backend. The frontend is served statically, while the API backend is proxied through nginx./

/NOTE: All config files ending with =.in= are preprocessed by jinja2. Scripts ending with =.in= are meant to be sourced instead of executed./

I use this project frequently as a playing ground to test some **unorthodox
practices and novel workflows** that I am working on. Some of them have proven
very useful, and I have decided to make them a central part of the development
workflow of my website:
- [[tem][=tem=]] :: A new way to manage project environments. It is still in its early
  stages, but is still useful as it made my workflow very efficient.
  Using this program, I am able to create shell scripts for common tasks and
  automatically have them available in my =PATH= whenever I enter the project
  directory using the CLI. I have also set the project up so that some shell
  variables are automatically available to me when I use the =fish= shell.
- [[shdocker][=shdocker=]] :: A preprocessor for Dockerfiles that allows me to use the shell
  to inject dynamic data into them. For example, each configuration (production,
  staging and dev) is defined in the same shDockerfile, and I control the
  different output Dockerfiles using =if= statements in the shDockerfile. See for
  yourself in [[./docker/shDockerfile.web]].

* Environment variables
** =ENVIRONMENT=
The environment that the server is running in. Can be one of: =dev=, =staging=,
=prod=.

The meaning of these should be obvious. The =dev= environment exposes ports of all
containers to the host and it enables hot reloading. It uses a local (ephemeral)
database and the local filesystem where applicable. The =staging= environment is
meant to be as similar to =prod= as possible, using a persistent database, a
dropbox account for storage of some files, etc. Obviously, it doesn't use the
same accounts and API keys. =dev= and =staging= can be deployed locally. =staging= can
also be served on a dedicated server. It is password protected regardless of
whether it is served locally or on a server. The password is saved in the
browser via cookie so you don't have to enter it every time.

** =DEVICE=
** TODO Ports
| Env variable | Value | Description   |
| =WEB_PORT=     |  3000 | Main web port |

**3000**: main web port

**5432**: postgres database

**8000**: backend app

**5000**: Docker registry

* Available commands
- Deploy locally: =up=
- Force remove all containers locally: =down=
- Serve production server: =serve=
  This command should be run on a VPS.
- Manage local secrets: =lpass= - a wrapper around GNU =pass=
- Upload local secrets to the server: =upload-secrets=

* Some things that should be kept in mind

- For greater maintainability and migratability, ports are not hardcoded in
  files (where possible). Instead they are taken from the environment. The
  most notable example is =nginx.conf= where variables are baked into the
  target file using =envsubst=. To avoid conflicts with nginx's own variables,
  the =envsubst= command is called with the relevant environment variables
  explicitly specified as arguments. So, if you want to add a new variable in
  =nginx.conf=, you will have to specify the variable inside
  =scripts/entrypoint-prod.sh= where the =envsubst= command is invoked.

* Static assets

Static assets are collected by the django =manage.py= script into
=/var/static_root=, because that's the easiest way (django provides the
=collectstatic= command).

* Serving files temporarily

To create a temporary endpoint for serving a file, just put a file (for example
one named =myfile=) inside the =~/tmp_root= directory. The file will be
available at a URL subpath that corresponds to the path of the file relative to
=~/tmp_root= (in our example that is =/myfile=). Note that =index.html= behave
as usual, i.e. =~/tmp_root/myfile/index.html= will be available at =/myfile= and
=/myfile/=.

* Staging

The staging version of the website can be accessed at =/stg=. A form will be
displayed for you to login. Your auth will be stored in the session, so you don't
have to login again until the staging website is restarted.

When testing the staging build locally, you can use the following credentials:
Username: =test=
Password: =test=

** Notes

The =web= container (if run with a staging configuration) also allows you to
access the website at =/=, without password protection for convenience, just
like in =dev= or =prod=.

* Known errors and workarounds
- The nuxt config doesn't respect the =devServer.port= option, so the frontend port is
  hardcoded as 3000.
