# Configuration for the host

user root;

events {}

http {
    include mime.types;
    default_type text/plain;

    ssl_certificate     ${USER_HOME}/cert/server.crt;
    ssl_certificate_key ${USER_HOME}/cert/server.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # HTTP to HTTPS redirect
    server {
        listen 80 default_server;
        return 301 https://$host$request_uri;
    }

    server {
        server_name *.veracioux.me *.localhost;
        listen 443 ssl;

        gzip on;
        gzip_types text/plain text/html text/javascript application/javascript text/css;
        gzip_min_length 512;

        location / {
            # Path where we can put files to be served as temporary endpoints
            root ${USER_HOME}/tmp_root;
            try_files $uri $uri/index.html @;
        }

        location @ {
            proxy_pass http://localhost:${WEB_PORT};
            proxy_set_header Host $http_host;
        }

        location /documents {
            alias ${USER_HOME}/documents;
        }
    }

    server {
        server_name stg.veracioux.me;
        listen 443 ssl;

        gzip on;
        gzip_types text/plain text/html text/javascript application/javascript text/css;
        gzip_min_length 512;

        location / {
            proxy_pass http://localhost:${WEB_PORT_STAGING};
        }
    }

    server {
        server_name docker.veracioux.me;
        listen 443 ssl;
        location / {
            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto https;
            proxy_set_header    X-Forwarded-Ssl on;
            proxy_pass          http://localhost:${DOCKER_REGISTRY_PORT}/;
            proxy_cache off;
            proxy_read_timeout  900;
            client_max_body_size 0;
            chunked_transfer_encoding on;
        }
    }

    # NOTE: [.] prevents nginx from complaining if the file doesn't exist
    include /etc/nginx/nginx[.]tmp.conf;
}
